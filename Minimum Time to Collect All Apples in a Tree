class Solution {
public:
    int count=0;
    bool helper(int src,vector<int>arr[], vector<bool>& hasApple,int n,int visited[])
    {
        if(visited[src]==1)
            return false;
        int flag=0;
        visited[src]=1;
        for(int i=0;i<arr[src].size();i++)
        {
            if(helper(arr[src][i],arr,hasApple,n,visited))
            {
                count+=2;
                flag=1;
            }
        }
        if(flag==0)
        {
        if(hasApple[src]==true)
            return true;
        else
        return false;}
        return true;
    }
    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {
        vector<int>arr[n];
        for(int i=0;i<edges.size();i++)
        {
            int a= edges[i][0];
            int b= edges[i][1];
            arr[a].push_back(b);
            arr[b].push_back(a);
        }
        int visited[n];
        for(int i=0;i<n;i++)
            visited[i]=0;
        for(int i=0;i<n;i++){
            if(visited[i]==0){
        helper(i,arr,hasApple,n,visited);
            }
        }
        return count;
    }
};
